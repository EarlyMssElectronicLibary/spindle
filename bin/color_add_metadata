#!/bin/sh

read -r -d '' HELP <<-'EOF'

Add metadata to each TIFF and JPEG in `PACKAGE_DIR/data`.

This script will add the following metadata tags

    IPTC Source                        - required
    IPTC Object name                   - required
    IPTC Keywords
        - Resolution (PPI)               - required
        - Postion                        - required
    EXIF Creator                       - required
    AP DAT Bits Per Sample             - required
    AP DAT File Processing             - required
    AP DAT File Processing Rotation    - required
    AP DAT Joining Different Parts Of  - required
    AP DAT Joining Same Parts of Folio - required
    AP DAT Processing Comments         - optional
    AP DAT Processing Program          - required
    AP DAT Software Version            - required; `See DAT_Processing Program`
    AP DAT Type of Contrast Adjustment - required
    AP DAT Type of Image Processing    - required
    AP ID Parent File                  - required


EOF
# functions

### TEMPFILES
# From:
#   http://stackoverflow.com/questions/430078/shell-script-templates
# create a default tmp file name
tmp=${TMPDIR:-/tmp}/prog.$$
# delete any existing temp files
trap "rm -f $tmp.?; exit 1" 0 1 2 3 13 15
# then do
#   ...real work that creates temp files $tmp.1, $tmp.2, ...

#### USAGE AND ERRORS
cmd=`basename $0 .sh`
export SPINDLE_COMMAND=$cmd
source `dirname $0`/spindle_functions

usage() {
   echo "Usage: $cmd [-h] PACKAGE_DIR"
   echo ""
   echo "OPTIONS"
   echo ""
   echo "   -h             Display help message"
   echo "   -v             Display Spindle version"
   echo ""
}

# AP DAT Processing Program          - required
PROCESSING_PROGRAM="PhotoShoot 4"
processing_program() {
  pp_color_tif=$1
  # Now this can't be done dynamically, we're using PhotoShoot 4 pre
  # Ken Boydston email message to Doug Emery 2013-07-10
  echo "$PROCESSING_PROGRAM"
}

image_rotation() {
  ir_exif=$1
  if [ -f $ir_exif ]; then
    ir_orientation=`grep "Orientation" $ir_exif`
    if echo "$ir_orientation" | grep "270" >/dev/null ; then
      echo "270"
    elif echo "$ir_orientation" | grep "180" >/dev/null ; then
      echo "180"
    elif echo "$ir_orientation" | grep "90" >/dev/null ; then
      echo "90"
    else
      echo "0"
    fi
    return 0
  else
    echo "EXIF file not found: $ir_exif" >&2
    return 1
  fi
}

# AP DAT File Processing Rotation - Get from UV EXIF
# AP ID Parent File - Get from Ken (color file header?)
# MB455RB_002
# MB470LB_003
# MB505Cy_004
# MB535Gr_005
# MB570Am_006
# MB625Rd_007

### VARIABLES
# AP DAT Bits Per Sample - '8'
BITS_PER_SAMPLE="8"
# AP DAT Samples Per Pixel - '3'
SAMPLES_PER_PIXEL="3"
# AP DAT Joining Same Parts of Folio - 'true'
JOINING_SAME_PARTS="true"
# AP DAT Joining Different Parts Of Folio - 'false'
JOINING_DIFF_PARTS="false"
# AP DAT Processing Comments - [blank]
PROCESSING_COMMENTS=""
# AP DAT File Processing - PROCESSING_DESCRIPTION
PROCESSING_DESCRIPTION="Each color image is created using registered, 16-bit flattened TIFF images captured under six visible illuminant bands, 625 nm (red), 570 nm (amber), 535 nm (green), 505 nm (cyan), 470 nm (blue) and 455 nm (royal blue). A set of linear formulae is used to calculate calibrated color values from the five bands at each pixel position, and each image is output using a CIE L*a*b color space."
# AP DAT Software Version            - required; `See DAT_Processing Program`
SOFTWARE_VERSION="See DAT_Processing_Program"
# AP DAT Type of Contrast Adjustment - required
CONTRAST_ADJUSTMENT="None"
# AP DAT Type of Image Processing    - required
TYPE_OF_IMAGE_PROCESSING="Multispectral Color Developing"
# CREATORS
CREATORS="\"Damianos Kasotakis\", \"Evangelos Theodorou\""

JSON_TEMPLATE=`dirname $0`/../data/color_metadata_template.json

IN_DIR=
OUT_DIR=

### OPTIONS
while getopts ":hv" opt; do
  case $opt in
    h)
      usage
      version
      help
      exit 1
      ;;
    v)
      version
      exit 1
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### THESCRIPT
# the PACKAGE_DIR
PACKAGE_DIR=$1
if dir_exists $PACKAGE_DIR
then
  message "Using PACKAGE_DIR $PACKAGE_DIR"
else
  error "PACKAGE_DIR not found"
fi

# The DATA_DIR
DATA_DIR=$PACKAGE_DIR/data
if dir_exists $DATA_DIR ; then
  message "Using DATA_DIR: $DATA_DIR"
else
  error "DATA_DIR not found"
fi


file_list=$tmp.1
find $DATA_DIR -name \*.tif > $file_list

# staging file for the sed script; we need two json files, and therefore two
# sed scripts; one for the TIFF and one for JPEG; the two are identical
# except for the SourceFile.
sedstage=$tmp.4
# Temp file for the sed scripts
sedscr=$tmp.2
# Temp file the JSON files
json_tmp=$tmp.3.json
# If any files have errors, add them to this list
errors_found=
count=0
total=`wc -l $file_list | awk '{ print $1 }'`
date_cmd="date +%FT%T%z"
tstamp=`date +%FT%H%M%z`
report_count $count $total 0
while read file
do
  echo $file
  # create a sed script
  :> $sedscr

  # FILES WE'LL WORK WITH
  full_path=`get_full_path $file`
  shot_seq=`extract_shot_sequence $file`
  exif_file=`dirname $file`/${shot_seq}_uv_exif.txt
  tiff_list=`dirname $file`/${shot_seq}_tiff_list.txt

  # AP DAT File Processing Rotation    - required
  rotation=`image_rotation $exif_file`
  # AP DAT Processing Program          - required
  prog=`processing_program $file`
  # AP ID Parent File                  - required
  parents=`parent_files $file`
  parents=`json_array "$parents"`
  # IPTC Source                        - required
  iptc_source=`get_exif_tag Source $exif_file`
  # IPTC Object name                   - required
  object_name=`get_exif_tag ObjectName $exif_file`
  # IPTC Keywords
  #     - Resolution (PPI)               - required
  #     - Postion                        - required
  keywords=`get_exif_tag Keywords $exif_file`
  keywords=`keywords_to_array "$keywords"`

  # GENERATE THE SED SCRIPT

  echo "s/CREATORS/$CREATORS/" >> $sedstage
  echo "s/IPTC_SOURCE/$iptc_source/" >> $sedstage
  echo "s/OBJECT_NAME/$object_name/" >> $sedstage
  echo "s/KEYWORDS/$keywords/" >> $sedstage
  echo "s/BITS_PER_SAMPLE/$BITS_PER_SAMPLE/" >> $sedstage
  echo "s/SAMPLES_PER_PIXEL/$SAMPLES_PER_PIXEL/" >> $sedstage
  echo "s/FILE_PROCESSING_ROTATION/$rotation/" >> $sedstage
  echo "s/JOINING_SAME_PARTS/$JOINING_SAME_PARTS/" >> $sedstage
  echo "s/JOINING_DIFF_PARTS/$JOINING_DIFF_PARTS/" >> $sedstage
  echo "s/PROCESSING_DESCRIPTION/$PROCESSING_DESCRIPTION/" >>$sedstage
  echo "s/PROCESSING_COMMENTS/$PROCESSING_COMMENTS/" >> $sedstage
  echo "s/PROCESSING_PROGRAM/$PROCESSING_PROGRAM/" >> $sedstage
  echo "s/SOFTWARE_VERSION/$SOFTWARE_VERSION/" >> $sedstage
  echo "s/CONTRAST_ADJUSTMENT/$CONTRAST_ADJUSTMENT/" >> $sedstage
  echo "s/TYPE_OF_IMAGE_PROCESSING/$TYPE_OF_IMAGE_PROCESSING/" >> $sedstage
  echo "s/ID_PARENT_FILE/${parents}/" >> $sedstage


  files=
  jpeg=`echo "$file" | sed 's/\.tif$/.jpg/'`
  if [ -f $jpeg ]; then
    files="$file $jpeg"
  else
    warning "No JPEG found for $file"
  fi

  success=true
  for curr_file in $files
  do
    # create the sed script
    cp $sedstage $sedscr
    echo "s!SOURCE_FILE!$curr_file!" >> $sedscr
    # CREATE THE JSON FILE
    sed -f $sedscr $JSON_TEMPLATE > $json_tmp
    # APPLY THE METADATA
    if exiftool -overwrite_original -json=$json_tmp $curr_file ; then
      message "Added metadata to $curr_file"
    else
      invalid "Error applying metdata to $curr_file"
      erors_found="$erors_found $curr_file"
      success=false
    fi

    if $success ; then
      rm -f `dirname $file`/${shot_seq}*.tif.md5 $exif_file $tiff_list
    fi
  done

  # COUNT AND REPORT
  count=$(( $count + 1 ))
  report_count $count $total 0
done < $file_list

if [ -n "$errors_found" ]; then
  invalid "Errors found with the following files"
  for f in $errors_found
  do
    invalid $f
  done
  exit 1
fi

### EXIT
# http://stackoverflow.com/questions/430078/shell-script-templates
rm -f $tmp.?
trap 0
exit 0
