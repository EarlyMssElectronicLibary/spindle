#!/bin/sh

read -r -d '' HELP <<-'EOF'

Add metadata to each TIFF and JPEG in `PACKAGE_DIR/data`.

This script will add the following metadata tags

    IPTC Source                        - required
    IPTC Object name                   - required
    IPTC Keywords
        - Resolution (PPI)               - required
        - Postion                        - required
    EXIF Creator                       - required
    AP DAT Bits Per Sample             - required
    AP DAT File Processing             - required
    AP DAT File Processing Rotation    - required
    AP DAT Joining Different Parts Of  - required
    AP DAT Joining Same Parts of Folio - required
    AP DAT Processing Comments         - optional
    AP DAT Processing Program          - required
    AP DAT Software Version            - required; `See DAT_Processing Program`
    AP DAT Type of Contrast Adjustment - required
    AP DAT Type of Image Processing    - required
    AP ID Parent File                  - required


EOF
# functions
SHOT_SEQ_PATTERN="^[0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9]$"
valid_shot_sequence() {
  echo "$1" | grep "$SHOT_SEQ_PATTERN" > /dev/null
}

### TEMPFILES
# From:
#   http://stackoverflow.com/questions/430078/shell-script-templates
# create a default tmp file name
tmp=${TMPDIR:-/tmp}/prog.$$
# delete any existing temp files
trap "rm -f $tmp.?; exit 1" 0 1 2 3 13 15
# then do
#   ...real work that creates temp files $tmp.1, $tmp.2, ...

#### USAGE AND ERRORS
cmd=`basename $0 .sh`
export SPINDLE_COMMAND=$cmd
source `dirname $0`/spindle_functions

usage() {
   echo "Usage: $cmd [-h] PACKAGE_DIR"
   echo ""
   echo "OPTIONS"
   echo ""
   echo "   -h             Display help message"
   echo "   -v             Display Spindle version"
   echo ""
}

processing_program() {
  pp_color_tif=$1
  # Now this can't be done dynamically, we're using PhotoShoot 4 pre
  # Ken Boydston email message to Doug Emery 2013-07-10
  echo "PhotoShoot 4"
}

image_rotation() {
  ir_exif=$1
  if [ -f $ir_exif ]; then
    ir_orientation=`grep "Orientation" $ir_exif`
    if echo "$ir_orientation" | grep "270" >/dev/null ; then
      echo "270"
    elif echo "$ir_orientation" | grep "180" >/dev/null ; then
      echo "180"
    elif echo "$ir_orientation" | grep "90" >/dev/null ; then
      echo "90"
    else
      echo "0"
    fi
    return 0
  else
    echo "EXIF file not found: $ir_exif" >&2
    return 1
  fi
}

# AP DAT File Processing Rotation - Get from UV EXIF
# AP ID Parent File - Get from Ken (color file header?)
# MB455RB_002
# MB470LB_003
# MB505Cy_004
# MB535Gr_005
# MB570Am_006
# MB625Rd_007
WAVELENGTHS=`cat<<EOF
455 002
470 003
505 004
535 005
570 006
625 007
EOF`
parent_files() {
  pf_color_tiff=$1
  if [ -f $pf_color_tiff ]; then
    pf_shot_seq=`extract_shot_sequence $pf_color_tiff`
    
    pf_tiffs=
    pf_tiff_list=`basename $pf_color_tiff`/${pf_shot_seq}_tiff_list.txt
    if [ -f $pf_tiff_list ]; then
      echo $WAVELENGTHS | while read pair
      do
        pf_wave=`echo $pair | awk '{ print $1 }'`
        pf_index=`echo $pair | awk '{ print $2 }'`
        pf_next_tiff=`grep "_${pf_index}_F.tif" $pf_tiff_list`
        if echo "$pf_next_tiff" | grep "$pf_wave" >/dev/null ; then
          pf_tiffs="${pf_tiffs} `basename $pf_next_tiff`
        else
          invalid "Expected wave/index pair: ${pf_wave}/${pf_index}; found $pf_next_tiff"
        fi
      done
    else
      echo "Expected TIFF list not found: $pf_tiff_list" >&2
      return 1
    fi
    return 0
  else
    echo "Could not find color TIFF file: $pf_color_tiff" >&2
    return 1
  fi
}

### VARIABLES
# AP DAT Bits Per Sample - '8'
BITS_PER_SAMPLE=8

# AP DAT Samples Per Pixel - '3'
SAMPLES_PER_BIT=3

# AP DAT File Processing - PROCESSING_DESCRIPTION
PROCESSING_DESCRIPTION="Each color image is created using registered, 16-bit flattened TIFF images captured under six visible illuminant bands, 625 nm (red), 570 nm (amber), 535 nm (green), 505 nm (cyan), 470 nm (blue) and 455 nm (royal blue). A set of linear formulae is used to calculate calibrated color values from the five bands at each pixel position, and each image is output using a CIE L*a*b color space."

# AP DAT Joining Different Parts Of Folio - 'false'
JOIN_DIFF_PARTS="false"

# AP DAT Joining Same Parts of Folio - 'true'
JOIN_SAME_PARTS="true"

# AP DAT Processing Comments - [blank]
PROCESSING_COMMENTS=

# AP DAT Processing Program - Get from Ken (color file header?)
# AP DAT Software Version - Get from Ken (color file header?)
PROCESSING_PROGRAM="PhotoShoot 4"

# AP DAT Type of Contrast Adjustment - 'none'
TYPE_OF_CONTRAST_ADJUSTMENT="none"

# AP DAT Type of Image Processing - Get from Ken
TYPE_OF_IMAGE_PROCESSING="Multispectral Color Developing"

# Get the following as described
#


JSON_TEMPLATE=`dirname $0`/../data/color_metadata_template.json

IN_DIR=
OUT_DIR=

### OPTIONS
while getopts ":hv" opt; do
  case $opt in
    h)
      usage 
      version
      help
      exit 1
      ;;
    v)
      version
      exit 1
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### THESCRIPT
# the PACKAGE_DIR
PACKAGE_DIR=$1
if dir_exists $PACKAGE_DIR
then
  message "Using PACKAGE_DIR $PACKAGE_DIR"
else
  error "PACKAGE_DIR not found"  
fi

# The DATA_DIR
DATA_DIR=$PACKAGE_DIR/data
if dir_exists $DATA_DIR ; then
  message "Using DATA_DIR: $DATA_DIR"
else
  error "DATA_DIR not found"
fi


file_list=$tmp.1
find $DATA_DIR -name \*_color.tif > $file_list

# Extract the following from <PACKAGE_DIR>/data/<SHOT_SEQ>_uv_exif.txt
#    IPTC Source                        - required
#    IPTC Object name                   - required
#    IPTC Keywords
#        - Resolution (PPI)             - required
#        - Postion                      - required

sedscr=$tmp.2
while read file
do
  # create a sed script
  :> $sedscr
  echo "s/SOURCE_FILE/$file/" >> $sedscr
  shot_seq=`extract_shot_sequence $file`
  exif_file=`basename $file`/${shot_seq}_uv_exif.txt
  rotation=`image_rotation $exif_file`
  echo "s/FILE_PROCESSING_ROTATION/$rotation/" >> $sedscr
  prog=`processing_program $file`
  echo "s/PROCESSING_PROGRAM/$prog/" >> $sedscr
  parent_files=


  # generate the json file
done < $file_list

### EXIT
# http://stackoverflow.com/questions/430078/shell-script-templates
rm -f $tmp.?
trap 0
exit 0
