#!/bin/sh

read -r -d '' HELP <<-'EOF'
For PACKAGE_DIR, copy all files with their checksums to the repository making a
record of what files are copied and where.

      .
      ├── LOG_verify_filenames.log
      ├── LOG_verify_metadata.log
      ├── data
      │   ├── 0015_000013_DJK_ICA_01_2.jpeg
      │   ├── 0015_000013_DJK_ICA_01_2.tif
      │   ├── ...
      │   ├── 0015_000013_DJK_ICA_04_RGB.jpeg
      │   └── 0015_000013_DJK_ICA_04_RGB.tif
      └── manifest-md5s.txt

EOF

### TEMPFILES
# From:
#   http://stackoverflow.com/questions/430078/shell-script-templates
# create a default tmp file name
tmp=${TMPDIR:-/tmp}/prog.$$
# delete any existing temp files
trap "rm -f $tmp.?; exit 1" 0 1 2 3 13 15
# then do
#   ...real work that creates temp files $tmp.1, $tmp.2, ...

#### USAGE AND ERRORS
cmd=`basename $0 .sh`
export SPINDLE_COMMAND=`basename $0`
export HELP
source `dirname $0`/spindle_functions

usage() {
   echo "Usage: $cmd [OPTIONS] PACKAGE_DIR REPOSITORY_DRIVE"
   echo ""
   echo "OPTIONS"
   echo ""
   echo "   -h             Display help message"
   echo "   -v             Display Spindle version"
   echo ""
}

### CONSTANTS
# the list of valid files; don't run without it
MANIFEST_FILE=manifest-md5s.txt
REPO_PROC_DIR=Repository/Processed
RECEIPT_APPROVED=RECEIPT_APPROVED.txt
INGESTION_COMPLETE=IMAGE_INGESTION_COMPLETE.txt

### VARIABLES
# the package dir
PACKAGE_DIR=
# the data directory
DATA_DIR=
# the log of what we've ingested
INGEST_LOG=
# the drive where the repo is
REPO_VOLUME=
# the full path to the processed file folder
REPO_PATH=

### OPTIONS
while getopts ":hv" opt; do
  case $opt in
    h)
      usage 
      version
      help
      exit 1
      ;;
    v)
      version
      exit 1
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### THESCRIPT
# grab package directoy and confirm it exists
PACKAGE_DIR=`package_dir $1`
if [ $? -ne 0 ]; then
  error "Error finding package directory"
fi

# make sure there's a data directory in PACKAGE_DIR
DATA_DIR=`data_dir $PACKAGE_DIR`
if [ $? -ne 0 ]; then
  error "Error finding data directory"
fi

REPO_VOLUME=`repo_volume $2`
if [ $? -ne 0 ]; then
  error "Error finding repository volume"
fi

# must have valid file names file to run
if [ ! -f $PACKAGE_DIR/$MANIFEST_FILE ]; then
  error "Must have $PACKAGE_DIR/$MANIFEST_FILE"
fi

# TODO: Must have RECEIPT_APPROVED
if [ -f $PACKAGE_DIR/$RECEIPT_APPROVED ]; then
  message "Package approved: `cat $PACKAGE_DIR/$RECEIPT_APPROVED`"
else
  error_no_exit "File not found: $PACKAGE_DIR/$RECEIPT_APPROVED"
  error "Package has not been approved"
fi

REPO_PATH=$REPO_VOLUME/$REPO_PROC_DIR
# TODO: REPO_VOLUME/REPO_PROC_DIR must exist
if [ -d $REPO_PATH ]; then
  message "Found repository directory: $REPO_PATH"
else
  error "Repository folder not found $REPO_PATH"
fi

### INGEST FILES
# change to the package dir
if [ "$PACKAGE_DIR" != "." ]; then
  cd $PACKAGE_DIR
fi

# name the ingest log
file_list=$tmp.1
if  ! write_file_list $MANIFEST_FILE $file_list ; then
  error "Unable to get file list from $MANIFEST_FILE"
fi
first_file=`head -n1 $file_list`
processor=`basename $first_file | awk -F_ '{ print $3 }'`
INGEST_LOG=${processor}_ingest_list_`date +%Y%m%dT%H%M%S%z`.log
:>$INGEST_LOG

count=0
total=`wc -l $file_list | awk '{ print $1 }'`
date_cmd="date +%FT%T%z"
report_count $count $total 0
while read file
do
  base=`basename $file`
  shot_seq=`echo $base | awk -F_ '{ print $1 "_" $2 }'`
  dest=$REPO_PATH/$shot_seq
  if [ ! -d $dest ]; then
    mkdir $dest
  fi
  # COPY
  cp -v $file $dest >> $INGEST_LOG
  # copy the checksum
  # grep -F pattern is fixed string
  line=`grep -F "$file" $MANIFEST_FILE`
  checksum=`echo $line | awk '{ print $1 }'`
  md5_file=$dest/$base.md5
  if [ -f $md5_file ]; then
    warning "Overwriting existing md5 file $md5_file"
  fi
  echo "$checksum  $base" > $md5_file
  # COUNT AND REPORT
  count=$(( $count + 1 ))
  report_count $count $total 0 $file
done < $file_list

iso_date > $INGESTION_COMPLETE

### EXIT
# http://stackoverflow.com/questions/430078/shell-script-templates
rm -f $tmp.?
trap 0
exit 0


