#!/usr/bin/env ruby

require 'getoptlong'
require 'json'
require 'zlib'
require 'fog'

require_relative 'spindle_functions'

COMMAND = File.basename(__FILE__)

def usage
  "Usage: #{COMMAND} [OPTIONS] PACKAGE_DIR
"
end # def usage

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ]
)

opts.each do |opt, arg|
  case opt
    when '--help'
      puts usage
      puts "
OPTIONS

      -h, --help: show help

Push *-prep.json.gz files in PACKAGE_DIR to AWS S3.
"
exit 0
  end
end

package_dir = find_package_dir ARGV.shift

if package_dir
  message COMMAND, "Using package directory: #{package_dir}"
else
  puts usage
  exit 1
end

# make we have an AWS bucket
if SPINDLE_AWS_BUCKET.nil? 
  error COMMAND, "No SPINDLE_AWS_BUCKET found."
  error COMMAND, "Please set up #{ENV['HOME'] + '/.spindle/init.rb'}"
  exit 1
elsif SPINDLE_AWS_BUCKET == 'REPLACE_ME'
  error COMMAND, "SPINDLE_AWS_BUCKET value not valid: #{SPINDLE_AWS_BUCKET}."
  error COMMAND, "Please edit #{ENV['HOME'] + '/.spindle/init.rb'}"
  exit 1
else
  message COMMAND, "Using SPINDLE_AWS_BUCKET: #{SPINDLE_AWS_BUCKET}"
end

# change to the package_dir
Dir.chdir package_dir

prep_files = Dir["*_metadata_*-prep.json.gz"]

credentials =  {
  provider:                'AWS',
  aws_access_key_id:       ENV['AMAZON_ACCESS_KEY_ID'],
  aws_secret_access_key:   ENV['AMAZON_SECRET_ACCESS_KEY']
}

connection = Fog::Storage.new(credentials)

push_errors = []
prep_files.each do |file|
  begin
    connection.put_object SPINDLE_AWS_BUCKET, file, File.read(file)
    message COMMAND, "Pushed #{file} to bucket #{SPINDLE_AWS_BUCKET}"
  rescue StandardError => e
    error COMMAND, "Problem pushing #{file} to bucket #{SPINDLE_AWS_BUCKET}"
    puts e.message
    puts e.backtrace
    push_errors << e   
  end
end

status = 0
if push_errors.empty?
  message COMMAND, "All files successfully pushed"
else
  error COMMAND, "Errors pushing files: #{push_errors.size} of #{prep_files.size} had errors"
  push_errors.each do |err|
    error COMMAND, err.message
  end
  status = 1
end

exit status