#!/bin/sh

read -r -d '' HELP <<-'EOF'
Checkin data in PACKAGE_DIR. Collect, prepare, and push metadata to the KatIkon
application.  The image data must have already been ingested and there must be
an ingest log in the PACKAGE_DIR.

Specifically, the script has these prerequisites:

* the package must have a RECEIPT_APPROVED.txt file

* the package image files must have been ingested; thus, an
  IMAGE_INGESTION_COMPLETE.txt file must be present

It runs the following scripts:

  * checkin_collect_metadata
  * checkin_prep_metadata
  * checkin_push_metadata

This script will do the the following:

* create metadata *.json files of EXIF metadata extracted from the image files
* create metadata *-prep.json.gz files, which combine EXIF metadata with ingest
  log repository path information
* push the prep metadata files to KatIkon's AWS data store
* write the METADATA_UPLOADED.txt file upon success completion

EOF

### TEMPFILES
# From:
#   http://stackoverflow.com/questions/430078/shell-script-templates
# create a default tmp file name
tmp=${TMPDIR:-/tmp}/prog.$$
# delete any existing temp files
trap "rm -f $tmp.?; exit 1" 0 1 2 3 13 15
# then do
#   ...real work that creates temp files $tmp.1, $tmp.2, ...

#### USAGE AND ERRORS
cmd=`basename $0 .sh`
export SPINDLE_COMMAND=`basename $0`
export HELP
source `dirname $0`/spindle_functions

usage() {
   echo "Usage: $cmd [OPTIONS] PACKAGE_DIR REPOSITORY_DRIVE"
   echo ""
   echo "OPTIONS"
   echo ""
   echo "   -j             Skip metadata collection file creation if JSON files already present"
   echo "   -J             Force metadata collection even if JSON files present"
   echo ""
   echo "   -g             Skip metadata prep if PREP files already present"
   echo "   -G             Force metadata prep even if PREP files present"
   echo ""
   echo "   -k             Skip repeat upload of metadata"
   echo "   -K             Force repeat upload of metadata"
   echo ""
   echo "   -a             Skip all repeat steps"
   echo "   -A             Force repeat all steps"
   echo ""
   echo "   -h             Display help message"
   echo "   -v             Display Spindle version"
   echo ""
}

### CONSTANTS
# the list of valid files; don't run without it
MANIFEST_FILE=manifest-md5s.txt
REPO_PROC_DIR=Repository/Processed
RECEIPT_APPROVED=RECEIPT_APPROVED.txt
INGESTION_COMPLETE=IMAGE_INGESTION_COMPLETE.txt
METADATA_UPLOADED=METADATA_UPLOADED.txt
METADATA_UPLOAD_ERRORS=METADATA_UPLOAD_ERRORS.txt

# COMMANDS
THIS_DIR=`dirname $0`
THIS_DIR=`( cd $THIS_DIR; pwd)`
COLLECT_METADATA=$THIS_DIR/checkin_collect_metadata
PREP_METADATA=$THIS_DIR/checkin_prep_metadata
PUSH_METADATA=$THIS_DIR/checkin_push_metadata


### VARIABLES
# the package dir
PACKAGE_DIR=
# the data directory
DATA_DIR=
# the log of what we've ingested
INGEST_LOG=
# the drive where the repo is
REPO_VOLUME=
# the full path to the processed file folder
REPO_PATH=
JSON_SKIP=
JSON_CLOBBER=
PREP_SKIP=
PREP_CLOBBER=
UPLOAD_SKIP=
UPLOAD_FORCE=

### OPTIONS
while getopts ":hvjJgGkKaA" opt; do
  case $opt in
    h)
      usage
      version
      help
      exit 1
      ;;
    v)
      version
      exit 1
      ;;
    j)
      JSON_SKIP=true
      ;;
    J)
      JSON_CLOBBER=true
      ;;
    g)
      PREP_SKIP=true
      ;;
    G)
      PREP_CLOBBER=true
      ;;
    k)
      UPLOAD_SKIP=true
      ;;
    K)
      UPLOAD_FORCE=true
      ;;
    a)
      message "SKIP ALL selected"
      JSON_SKIP=true
      PREP_SKIP=true
      UPLOAD_SKIP=true
      ;;
    A)
      message "FORCE ALL selected"
      JSON_CLOBBER=true
      PREP_CLOBBER=true
      UPLOAD_FORCE=true
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### THESCRIPT
# grab package directoy and confirm it exists
PACKAGE_DIR=`package_dir $1`
if [ $? -ne 0 ]; then
  error "Error finding package directory"
fi

# Must have RECEIPT_APPROVED
if [ -f $PACKAGE_DIR/$RECEIPT_APPROVED ]; then
  message "Package approved: `cat $PACKAGE_DIR/$RECEIPT_APPROVED`"
else
  error_no_exit "File not found: $PACKAGE_DIR/$RECEIPT_APPROVED"
  error "Package has not been approved"
fi

# Must have INGEST_COMPLETE
if [ -f $PACKAGE_DIR/$INGESTION_COMPLETE ]; then
  message "Ingest completed: `cat $PACKAGE_DIR/$INGESTION_COMPLETE`"
else
  error_no_exit "File not found: $PACKAGE_DIR/$INGESTION_COMPLETE"
  error "Package has not been ingested"
fi


# Collect metadata
if has_exif_json_files $PACKAGE_DIR ; then
  warning "JSON metadata file(s) already present"
  if [ "$JSON_SKIP" ] ; then
    warning "JSON_SKIP selected; skipping metadata collection"
  elif [ "$JSON_CLOBBER" ]; then
    warning "JSON_CLOBBER selected; deleting old *.json files"
    rm $PACKAGE_DIR/*_metadata_*.json
    $COLLECT_METADATA $PACKAGE_DIR
  else
    error "Refusing to proceed; use -j to skip or -J to force metadata collection"
  fi
else
  $COLLECT_METADATA $PACKAGE_DIR
fi

# Prep metadata
if has_prep_json_files $PACKAGE_DIR ; then
  warning "PREP metadata file(s) already present"
  if [ "$PREP_SKIP" ] ; then
    warning "PREP_SKIP selected; skipping metadata preparation"
  elif [ "$PREP_CLOBBER" ]; then
    warning "PREP_CLOBBER selected; deleting old *-prep.json.gz files"
    rm $PACKAGE_DIR/*-prep.json.gz
    $PREP_METADATA $PACKAGE_DIR
  else
    error "Refusing to proceed; use the -g to skip or -G to force metadata preparation"
  fi
else
  $PREP_METADATA $PACKAGE_DIR
fi

# push the data
if [ -f $PACKAGE_DIR/$METADATA_UPLOADED ]; then
  warning "Metadata already uploaded"
  if [ "$UPLOAD_SKIP" ] ; then
    warning "UPLOAD_SKIP selected; skipping upload"
  elif [ "$UPLOAD_FORCE" ]; then
    warning "UPLOAD_FORCE selected; re-uploading data"
    $PUSH_METADATA $PACKAGE_DIR
  else
    error "Refusing to proceed; use the -k to skip or -K to force re-upload"
  fi
else
  $PUSH_METADATA $PACKAGE_DIR
fi

if [ $? -eq 0 ]; then
  iso_date > $PACKAGE_DIR/$METADATA_UPLOADED
else
  iso_date > $PACKAGE_DIR/$METADATA_UPLOAD_ERRORS
fi

### EXIT
# http://stackoverflow.com/questions/430078/shell-script-templates
rm -f $tmp.?
trap 0
exit 0


