#!/bin/sh

read -r -d '' HELP <<-'EOF'

For the given input IMAGE_LIST collect metdata and write out metadata as JSON.
Data will be written out to OUT_DIR ('.' by default). Each JSON file will
contain CHUNK_SIZE records (200 by default). BASE_NAME will be used as the
basename of each JSON file. For example,

    $ collect_metadata list_of_tiffs.txt 0080_000123_20141104
    Wrote 0080_000123_20141104_metadata_001.json
    Wrote 0080_000123_20141104_metadata_002.json
    Wrote 0080_000123_20141104_metadata_003.json
    Wrote 0080_000123_20141104_metadata_004.json

EOF

### TEMPFILES
# From:
#   http://stackoverflow.com/questions/430078/shell-script-templates
# create a default tmp file name
tmp=${TMPDIR:-/tmp}/prog.$$
# delete any existing temp files
trap "rm -f $tmp.?; exit 1" 0 1 2 3 13 15
# then do
#   ...real work that creates temp files $tmp.1, $tmp.2, ...

#### USAGE AND ERRORS
cmd=`basename $0 .sh`
export SPINDLE_COMMAND=$cmd
source `dirname $0`/spindle_functions

usage() {
   echo "Usage: $cmd [options] IMAGE_LIST BASE_NAME"
   echo ""
   echo "For all images in IMAGE_LIST, output exif metadata to JSON files,"
   echo "using BASE_NAME for each JSON file."
   echo ""
   echo "OPTIONS"
   echo ""
   echo "   -d OUT_DIR      Output directory [.]"
   echo "   -c CHUNK_SIZE  Number of records per JSON file [200]"
   echo "   -h              Display help message"
   echo "   -v              Display Spindle version"
   echo ""
}

### CONSTANTS
OUT_DIR=.
CHUNK_SIZE=200

### OPTIONS
while getopts ":hvd:c:" opt; do
  case $opt in
    h)
      usage 
      version
      help
      exit 1
      ;;
    v)
      version
      exit 1
      ;;
    d)
      OUT_DIR=$OPTARG
      ;;
    c)
      CHUNK_SIZE=$OPTARG
      ;;
    \?)
      echo "ERROR Invalid option: -$OPTARG" >&2
      echo ""
      usage
      exit 1
      ;;
  esac
done

shift $((OPTIND-1))

### THESCRIPT
IMAGE_LIST=$1
if file_exists "$IMAGE_LIST"; then
  message "Using IMAGE_LIST: '$IMAGE_LIST'"
else
  error "Error finding IMAGE_LIST: '$IMAGE_LIST'"
fi

BASE_NAME="$2"
if [ -n "$BASE_NAME" ]; then
  message "Using BASE_NAME: '$BASE_NAME'"
else
  error "Please provide a BASE_NAME"
fi

if dir_exists "$OUT_DIR" > /dev/null; then
  message "Using OUT_DIR: '$OUT_DIR'"
else
  error "Error finding OUT_DIR: '$OUT_DIR'"
fi
OUT_DIR=`get_full_path $OUT_DIR`

if [[ "$CHUNK_SIZE" =~ ^\ *[0-9][0-9]*\ *$ ]] ; then
  message "Using CHUNK_SIZE: $CHUNK_SIZE"
else
  error "CHUNK_SIZE is not an integer: '$CHUNK_SIZE'"
fi

json_base="${BASE_NAME}_metadata"
json_tmp=$tmp.2

# get file size in bytes, then make sure we get everything else
exif_opts="-fileSize# -all"


count=0  # which file we're on
chunk=0  
total=`wc -l $IMAGE_LIST | awk '{ print $1 }'`
message "Reading image files"
report_count $count $total 100
while read file
do
  count=$(( $count + 1 ))
  # if json_tmp is empty, then this is the first entry
  if [ ! -s $json_tmp ]; then
    # first file; replace last line "}]" with "},"
    exiftool -j $exif_opts $file | sed '$ s/\]$/,/' >> $json_tmp
  else
    # replace first line "[{" with "{"
    # replace last line "}]" with "},"
    exiftool -j $exif_opts $file | sed -e '$ s/\]$/,/' -e '1 s/^\[//' >> $json_tmp
  fi
  if [ "$(( $count % $CHUNK_SIZE ))" -eq 0 ]; then
    chunk_string=`printf "%03d" $chunk`
    json_file="$OUT_DIR/${json_base}_${chunk_string}.json"
    # last line should be "}]"; make it so
    sed '$ s/,$/]/' $json_tmp > "$json_file"
    message "Wrote JSON file to: $json_file"
    report_count $count $total 0
    # empty the temp file
    : > $json_tmp
    chunk=$(( $chunk + 1 ))
  fi
done < $IMAGE_LIST

# if we have any data left over, put it in a file
if [ -s $json_tmp ]; then
  # last line should be "}]"; make it so
  chunk_string=`printf "%03d" $chunk`
  json_file="${json_base}_${chunk_string}.json"
  sed '$ s/,$/]/' $json_tmp > $json_file
  date_cmd="date +%FT%T%z"
  message "Wrote JSON file to: $OUT_DIR/$json_file"
  message "`$date_cmd`  `printf "%${width}d" $count`/$total files read"
fi
  

### EXIT
# http://stackoverflow.com/questions/430078/shell-script-templates
rm -f $tmp.?
trap 0
exit 0


