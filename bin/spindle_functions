# spindle functions shared by all spindle shells scripts.  Scripts using
# spindle_functions should:
# 
#  --  export SPINDLE_COMMAND=`basename $0`
#  --  export HELP
#  --  source `dirname $0`/spindle_functions
#  --  if present, delete function 'message'
#  --  if present, delete function 'error_no_exit'
#  --  if present, delete function 'error'
#  --  if present, delete function 'fail'
#  --  if present, delete function 'success'
#  --  if present, delete function 'warning'
#  --  if present, delete function 'help'
#  --  if present, delete function 'log'
#  --  if present, delete function 'log_error'
#

# VERSION
VERSION=0.5.1

# MESSAGE AND USAGE FUNCTIONS 

# ISO date format YYYY-mm-ddTHH:MM:SS+-OFFSET
iso_date() {
  date +%FT%T%z
}

format_code_message() {
  fm_code=$1
  fm_file=$2
  printf "%-50s %s\n" "$fm_code" $fm_file
}

print_message() {
  msg_type=$1
  msg=$2
  echo "`printf "%-23s" "[$SPINDLE_COMMAND]"` `printf "%-12s" $msg_type`  $msg"
}

version() {
  prog=$1
  echo "Spindle version $VERSION"
  echo 
}

message() {
  print_message INFO "$1"
}

error_no_exit() {
  print_message ERROR "$1"
}

error() {
  echo "$SPINDLE_COMMAND: ERROR   - $1" 1>&2
  # if there's a usage function; print usage
  if type usage | grep "function" >/dev/null 2>&1 ; then
    echo ""
    usage
  fi
  exit 1
}

invalid() {
  print_message INVALID "$1"
}

valid() {
  print_message VALID "$1"
}

fail() {
  print_message FAIL "$1"
  exit 2
}

success() {
  print_message ALL_VALID "$1"
}

warning() {
  print_message WARNING "$1"
}

help() {
  echo "$HELP"
  echo ""
}

### LOGGING
# the default log file
logfile=LOG_${SPINDLE_COMMAND}.log

log() {
    echo "`date +%Y-%m-%dT%H:%M:%S` [$SPINDLE_COMMAND] $1" >> $logfile
}

error_file=ERROR_${SPINDLE_COMMAND}.log

log_error() {
  echo "`date +%Y-%m-%dT%H:%M:%S` [$SPINDLE_COMMAND] $1" >> $error_file
}

log_invalid() {
  the_log=$1
  msg="$2"
  echo "INVALID  $msg" >> $the_log
}

log_valid() {
  the_log=$1
  msg="$2"
  echo "VALID    $msg" >> $the_log
}

log_warning() {
  the_log=$1
  msg="$2"
  echo "WARNING  $msg" >> $the_log
}

log_info() {
  the_log=$1
  msg="$2"
  echo "INFO     $msg" >> $the_log
}

# usage: log_code LOG_FILE CODE [FILE]
log_code() {
  the_log=$1
  code=$2
  file=$3
  width=-15
  echo "`printf "%${width}s" $code`  $file" >> $the_log
}

# utility commands

# usage: package_dir $1
# make sure the package dir exists; return error if $1 empty
package_dir() {
  user_arg=$1
  if [ -z "$user_arg" ]; then
    error_no_exit "Please provide a PACKAGE_DIR"
    return 1
  elif [ ! -d $user_arg ]; then
    error_no_exit "PACKAGE_DIR not found: $user_arg"
    return 1
  fi
  echo $user_arg
  return 0
}

file_exists() {
  fe_file=$1
  fe_name=$2
  if [ -z "$fe_file" ]; then
    error_no_exit "Please provide a ${fe_name}"
    return 1
  elif [ ! -f $fe_file ]; then
    error_no_exit "${fe_name} not found: $fe_file"
    return 1
  fi
  echo $fe_file
  return 0

}

dir_exists() {
  de_dir=$1
  de_name=$2
  if [ -z "$de_dir" ]; then
    error_no_exit "Please provide a ${de_name}"
    return 1
  elif [ ! -d $de_dir ]; then
    error_no_exit "${de_name} not found: $de_dir"
    return 1
  fi
  echo $de_dir
  return 0
}

repo_volume() {
  rv_vol=$1
  if [ -z "$rv_vol" ]; then
    error_no_exit "Please provide a REPO_VOLUME"
    return 1
  elif [ ! -d $rv_vol ]; then
    error_no_exit "REPO_VOLUME not found: $rv_vol"
    return 1
  fi
  echo $rv_vol
  return 0
}

KILOBYTE=1024
MEGABYTE=$(( $KILOBYTE * 1024))
GIGABYTE=$(( $MEGABYTE * 1024))

# convert bytes to KB, MB or GB
translate_bytes() {
  tb_bytes=$1
  if [ $tb_bytes -gt $GIGABYTE ]; then
    echo "~$(( $tb_bytes / $GIGABYTE )) GB"
  elif [ $tb_bytes -gt $MEGABYTE ]; then
    echo "~$(( $tb_bytes / $MEGABYTE )) MB"
  elif [ $tb_bytes -gt $KILOBYTE ]; then
    echo "~$(( $tb_bytes / $KILOBYTE )) KB"
  fi
}

# Compare the manifest file list with the files in the data directory. The two
# must match exactly for the this function to return 0; otherwise, it returns 1.
# The function also prints messages and logs data to LOG_FILE.
#
#     Usage: check_manifest_files LOG_FILE
#
# This function assumes the file manifest-md5s.txt and the `data` directory are
# in current working directory.
check_manifest_files() {
  zzthe_log=$1
  work=/tmp/spindle.$$
  zzstatus=0

  # get the actual files
  zzfile_list=$work.1
  find data -type f | sort > $zzfile_list 

  # get the manifest file list
  zzmanifest=manifest-md5s.txt
  zzmanifest_files=$work.2
  awk '{ print $2 }' $zzmanifest | sed 's/\*//' | sort > $zzmanifest_files

  # compare the file system with the manifest
  zzdiff_file=$work.3
  diff $zzfile_list $zzmanifest_files > $zzdiff_file
  if [ $? -ne 0 ]; then
    error_no_exit "Manifest does not match directory contents"

    # files not in the manifest
    zznot_in_manifest=$work.4
    grep "^<" $zzdiff_file | sed 's/<//' > $zznot_in_manifest
    while read x
    do
      msg=`format_code_message NOT_IN_MANIFEST=$x $zzmanifest`
      error_no_exit "$msg"
      log_invalid $zzthe_log "$msg"
    done < $zznot_in_manifest
    x=

    # files not in the file system
    zzno_such_files=$work.5
    grep "^>" $zzdiff_file | sed 's/>//' > $zzno_such_files
    while read x
    do
      msg=`format_code_message NO_SUCH_FILE=$x $zzmanifest`
      error_no_exit "$msg"
      log_invalid $zzthe_log "$msg"
    done < $zzno_such_files
    x=
    message "Errors logged to `pwd`/$logfile"
    zzstatus=1
  fi
  rm -f $work.*
  return $zzstatus
}

# Report the current count of a file iteration.
# The arguments are:
#
#     Usage: report_count COUNT TOTAL INTERVAL [FILE]
# 
#   COUNT     the count/index of the current file
#   TOTAL     the total number of files
#   INTERVAL  how often to report the count, an interval of 0 (zero)
#             will force the count to be printed 
#   FILE      optional file name to print with count
#
# Output is printed as an INFO message and includes a time stamp.
report_count() {
  rc_count=$1
  rc_total=$2
  rc_width=`echo $rc_total | wc -c`
  rc_width=$(( $rc_width - 1 ))
  rc_mark=`printf "%${rc_width}d/%d" $rc_count $rc_total`
  rc_interval=$3
  rc_file=$4
  if [ $rc_interval -eq 0 ]; then
    rc_time=`date +%Y-%m-%dT%H:%M:%S`
    if [ -n "$rc_file" ]; then
      message "$rc_mark  `printf "%-40s" $rc_file` $rc_time"
    else 
      message "$rc_mark  $rc_time"
    fi
  elif [ "$(( $rc_count % $rc_interval ))" -eq 0 ]; then
    rc_time=`date +%Y-%m-%dT%H:%M:%S`
    message "$rc_mark  $rc_time"
  fi
}

#usage data_dir PACKAGE_DIR
data_dir() {
  input=$1
  data_dir=$input/data
  if [ ! -d $data_dir ]; then
    error_no_exit "Data directory not found: $data_dir"
    return 1
  else
    echo $data_dir
  fi
  return 0
}

# usage: list_of_files MANIFEST_FILE OUTPUT_FILE
#
# Write a list of files from the manifest MANIFEST_FILE to file OUTPUT_FILE.
write_file_list() {
  manifest=$1
  output=$2
  awk '{ print $2 }' $manifest | sort > $output
}

# determine the md5sum command to use
whichMd5() {
  MD5_CMD=
  if which md5sum >/dev/null 2>&1 ; then
    MD5_CMD=`which md5sum`
  elif which gmd5sum >/dev/null 2>&1 ; then
    MD5_CMD=`which gmd5sum`
  elif which md5 >/dev/null 2>&1 ; then
    MD5_CMD="`which md5` -r"
  fi
  echo $MD5_CMD
}

# Extract the MD5 checksum for TARGET_FILE from MD5S_TXT.
# 
# Usage: extract_checksum TARGET_FILE MD5S_TXT
#
# Note that this function calls `grep "[* ]TARGET_FILE$" $MD5S_TXT`. The value
# of TARGET_FILE must match the name of the file in md5s.txt exactly.
extract_checksum() {
  exs_target_file="$1"
  exs_md5s_file="$2"
  grep "[* ]${exs_target_file}$" "$exs_md5s_file" | awk '{ print $1 }'
}

# Verify that the MD5 checksum of FILE matches CHECKSUM.
#
# Usage: file_valid FILE CHECKSUM
#
file_valid() {
  fv_file=$1
  fv_md5=$2
  fv_md5cmd=`whichMd5`
  if [ -n "$fv_md5cmd" ]; then
    fv_actual=`$fv_md5cmd $fv_file | awk '{ print $1 }'`
    if [ "$fv_actual" = "$fv_md5" ]; then
      return 0
    else
      return 1
    fi
  else
    echo "No MD5 command found" >&2
    exit 2
  fi
}

# FILENAMES
# image file extensions
FILE_TYPES="jpg JPG jpeg JPEG tiff TIFF tif TIF dng DNG"
STANDARD_EXTS="jpg tif dng"
# file name characters and fields
# super set of valid file name characters; excluding '.'
VALID_CHARS="[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890_+-]"
# characters valid within a filename field
VALID_MEDIAL_CHARS="[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890+-]"
# characters that may atart or end a filename field
VALID_INIT_FINAL_CHARS="[ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890]"
SHOOT_LIST_PTRN="^[0-9][0-9][0-9][0-9]$"
SHOT_SEQ_PTRN="^[0-9][0-9][0-9][0-9][0-9][0-9]$"
PROCESSOR_PTRN="^[a-zA-Z][a-zA-Z][a-zA-Z]$"
PROC_TYPE_PTRN="^${VALID_INIT_FINAL_CHARS}${VALID_MEDIAL_CHARS}*${VALID_INIT_FINAL_CHARS}$"
MODIFIERS_PTRN="^(${VALID_INIT_FINAL_CHARS}$|${VALID_INIT_FINAL_CHARS}${VALID_MEDIAL_CHARS}*${VALID_INIT_FINAL_CHARS}$|$)"
# valid file name patterns
# FILE_SHOOT_LIST_PTRN="^${SHOOT_LIST}_"
# FILE_SHOT_SEQ_PTRN="${FILE_SHOOT_LIST_PTRN}${SHOT_SEQ}_"
# FILE_PROCESSOR_PTRN="${FILE_SHOT_SEQ_PTRN}${PROCESSOR}_"
# FILE_PROC_TYPE_PTRN="${FILE_PROCESSOR_PTRN}_${VALID_FIELD_CHARS}${VALID_FIELD_CHARS}*(\.|_)"
# Note that MODIFIERS is not required
# FILE_MODIFIERS_PTRN="${FILE_PROC_TYPE_PTRN}_\?${VALID_CHARS}${VALID_CHARS}*$"

isImageFile() {
  file=$1
  ext=`getExtension $file`
  stat=0
  for iext in $FILE_TYPES 
  do
    if [ "$ext" = "$iext" ]; then
      return 0
    fi
  done
  return 1
}

hasValidExt() {
  file=$1
  ext=`getExtension $file`
  stat=0
  for iext in $STANDARD_EXTS 
  do
    if [ "$ext" = "$iext" ]; then
      return 0
    fi
  done
  return 1
}

getExtension() {
  file=$1
  echo $file | awk -F '.' '{ print $NF }'
}

matchesPattern() {
  text=$1
  pattern=$2
  if echo "$text" | egrep "$pattern" >/dev/null 2>&1 ; then
    return 0
  fi
  return 1
}

is_a_tar_file() {
  file $1 | grep " tar " > /dev/null 2>&1
}

get_full_path() {
  echo $( cd $(dirname "$1"); pwd)/$(basename "$1")
}

extract_shot_sequence() {
  ess_file=$1
  ess_base=`basename $ess_file`
  echo "$ess_base" | awk -F '+' '{ print $1 }' | awk -F '_' '{ print $1 "_" $2 }'
}

has_prep_json_files() {
  hpjf_dir=$1
  if [ -d "$hpjf_dir" ]; then
    hpjf_files=`( cd $hpjf_dir; ls *-prep.json.gz 2>/dev/null )`
    if [ "$hpjf_files" ]; then
      for x in $hpjf_files 
      do
        warning "Found $x"
      done
      return 0
    else
      return 1
    fi
  else
    error_no_exit "Dir not found: $hpjf_dir"
    return 1
  fi
}

# For SHOT_SEQUENCE (e.g., 0001_000123), find the corresponding
# DNG dir in CAPTURE_DIR.
#
# Usage: locate_dng_dir SHOT_SEQUENCE CAPTURE_DIR
locate_dng_dir() {
  ldd_seq=$1
  ldd_cap_dir=$2

  # we could assume that the folder is <CAPTURE_DIR>/RAWS/<SHOT_SEQ>. This is
  # almost always correct; *but* I don't trust that they won't name the RAWS
  # folder `Raws` or `DNGS` or some other thing in the future. To be safe(?)
  # let's just find the UV DNG for the SHOT_SEQUENCE and use its folder.
  ldd_uv_dng=`locate_uv_dng $ldd_seq $ldd_cap_dir`
  if [ $? -eq 0 ]; then
    dirname $ldd_uv_dng
    return 0
  else
    echo "Could not locate DNG dir for $ldd_seq" >&2
    return 1
  fi
}

# For SHOT_SEQUENCE (e.g., 0001_000123), find the corresponding
# flattened TIFF dir in CAPTURE_DIR.
#
# Usage: locate_dng_dir SHOT_SEQUENCE CAPTURE_DIR
locate_tiff_dir() {
  ltd_seq=$1
  ltd_cap_dir=$2

  # we could assume that the folder is <CAPTURE_DIR>/FLATTENED/<SHOT_SEQ>. This is
  # almost always correct; *but* I don't trust that they won't name the FLATTENED
  # folder `Flattened` or `TIFFS` or some other thing in the future. To be safe(?)
  # let's just find the UV TIFF for the SHOT_SEQUENCE and use its folder.
  ltd_uv_tiff=`locate_uv_tiff $ltd_seq $ltd_cap_dir`
  if [ $? -eq 0 ]; then
    dirname $ltd_uv_tiff
    return 0
  else
    echo "Could not locate TIFF dir for $ltd_seq" >&2
    return 1
  fi
}

# For SHOT_SEQUENCE (e.g., 0001_000123), find the corresponding
# UV DNG in CAPTURE_DIR.
#
# Usage: locate_uv_dng SHOT_SEQUENCE CAPTURE_DIR
locate_uv_dng() {
  lud_seq=$1
  lud_cap_dir=$2
  # We assume that the UV DNG is image *_001.dng. This is risky,
  # but not too risky.
  lud_file=`find $lud_cap_dir -name "${lud_seq}[+_]*_001.dng"`
  lud_count=`echo "$lud_file" | wc -w | sed 's/ //g'`
  echo $lud_file
  if [ $lud_count -eq 1 ]; then
    return 0
  else
    echo "Expected 1 UV DNG file; found $lud_count" >&2
    return 1
  fi
}

# For SHOT_SEQUENCE (e.g., 0001_000123), find the corresponding
# UV TIFF in CAPTURE_DIR.
#
# Usage: locate_uv_dng SHOT_SEQUENCE CAPTURE_DIR
locate_uv_tiff() {
  lut_seq=$1
  lut_cap_dir=$2
  # We assume that the UV DNG is image *_001.dng. This is risky,
  # but not too risky.
  lut_file=`find $lut_cap_dir -name "${lut_seq}[+_]*_001_F.tif"`
  lut_count=`echo "$lut_file" | wc -w | sed 's/ //g'`
  echo "************************************************************"
  echo "lut_file is $lut_file" >&2
  echo lut_file
  if [ $lut_count -eq 1 ]; then
    return 0
  else
    echo "Expected 1 UV TIFF file; found $lut_count" >&2
    return 1
  fi
}

has_exif_json_files() {
  hejf_dir=$1
  if [ -d "$hejf_dir" ]; then
    hejf_files=`( cd $hejf_dir; ls *_metadata_*.json 2>/dev/null )`
    if [ "$hejf_files" ]; then
      for x in $hejf_files 
      do
        warning "Found $x"
      done
      return 0
    else
      return 1
    fi
  else
    error_no_exit "Dir not found: $hejf_dir"
    return 1
  fi
}

validateFilename() {
  file=$1 
  if [ -z "$file" ]; then
    error "validateFilename: please provide a file name; got '$file'"
  fi

  code=UNSET
  if ! isImageFile $file ; then
    section=`getExtension $file`
    code=BAD_FILE_TYPE
  elif ! hasValidExt $file ; then
    section=`getExtension $file`
    code=BAD_EXTENSION
  else
    ext=`echo $file | awk -F '.' '{ print $NF }'`
    base=`basename $file .${ext}`
    shoot_list=`echo $base | awk -F '_' '{ print $1 }'`
    shot_seq=`echo $base | awk -F '_' '{ print $2 }'`
    processor=`echo $base | awk -F '_' '{ print $3 }'`
    proc_type=`echo $base | awk -F '_' '{ print $4 }'`
    num_fields=`echo $base | awk -F '_' '{ print NF }'`
    if [ $num_fields -gt 4 ]; then
      modifiers=`echo $base | awk -F '_' '{ 
      printf $5; 
      for (i = 6; i <= NF; i++) { 
        printf "_" $i 
      }; 
      printf "\n" }'`
    fi
    if ! matchesPattern "$shoot_list" "$SHOOT_LIST_PTRN" ; then
      section=$shoot_list
      code=BAD_SHOOT_LIST
    elif ! matchesPattern "$shot_seq" "$SHOT_SEQ_PTRN" ; then
      section=$shot_seq
      code=BAD_SHOT_SEQ
    elif ! matchesPattern "$processor" "$PROCESSOR_PTRN" ; then
      section=$processor
      code=BAD_PROCESSOR
    elif ! matchesPattern "$proc_type" "$PROC_TYPE_PTRN" ; then
      section=$proc_type
      code=BAD_PROC_TYPE
    else
      code=VALID
    fi

    # finally we check the modifiers if we have have any
    if [ -n "$modifiers" ]; then
      for field in `echo $modifiers | sed 's/_/ /g'`
      do
        if ! matchesPattern "$field" "$MODIFIERS_PTRN" ; then
          code=BAD_MODIFIERS
        fi
      done
      if [ "$code" == "BAD_MODIFIERS" ]; then
        section=$modifiers
      fi
    fi
  fi

  if [ -n "$section" ]; then
    reason="$code=$section"
  else
    reason=$code
  fi
  echo "`printf "%-25s" $reason`  $file"
}

# From sorted lists of actual and logged files, say whether the lists are
# identical, and if not, say which is missing which files.
#
# usage: cmpActualToLogged ACTUAL LOGGED
#
# Where ACTUAL is file containing a sorted list of actual files in the data
# directory; and LOGGED is a file containing a list of logged files. Returns
# 0 if lists are identical; 1 otherwise.
cmpActualToLogged() {
  actual=$1
  logged=$2
  diff_out=/tmp/spindle_functions_diff$$
  if diff $actual $logged > $diff_out ; then
    message "VALID actual and logged files match"
    return 0
  else
    NOT_LOGGED=`grep "^<" $diff_out | sed 's/^<//'`
    for file in $NOT_LOGGED
    do
      error_no_exit "NOT_LOGGED    $file"
    done

    NO_SUCH_FILE=`grep "^>" $diff_out | sed 's/^>//'`
    for file in $NO_SUCH_FILE
    do
      error_no_exit "NO_SUCH_FILE  $file"
    done
    
    return 1
  fi
}

# AP DAT File Processing Rotation - Get from UV EXIF
# AP ID Parent File - Get from Ken (color file header?)
# MB455RB_002
# MB470LB_003
# MB505Cy_004
# MB535Gr_005
# MB570Am_006
# MB625Rd_007
WAVELENGTHS=`cat<<EOF
455 002
470 003
505 004
535 005
570 006
625 007
EOF`
parent_files() {
  pf_color_tiff=$1
  if [ -f $pf_color_tiff ]; then
    pf_shot_seq=`extract_shot_sequence $pf_color_tiff`
    
    pf_tiffs=
    pf_tiff_list=`basename $pf_color_tiff`/${pf_shot_seq}_tiff_list.txt
    if [ -f $pf_tiff_list ]; then
      echo $WAVELENGTHS | while read pair
      do
        pf_wave=`echo $pair | awk '{ print $1 }'`
        pf_index=`echo $pair | awk '{ print $2 }'`
        pf_next_tiff=`grep "_${pf_index}_F.tif" $pf_tiff_list`
        if echo "$pf_next_tiff" | grep "$pf_wave" >/dev/null ; then
          pf_tiffs="${pf_tiffs} `basename $pf_next_tiff`
        else
          invalid "Expected wave/index pair: ${pf_wave}/${pf_index}; found $pf_next_tiff"
        fi
      done
    else
      echo "Expected TIFF list not found: $pf_tiff_list" >&2
      return 1
    fi
    return 0
  else
    echo "Could not find color TIFF file: $pf_color_tiff" >&2
    return 1
  fi


MANIFEST_FILE=manifest-md5s.txt
VALID_FILES=valid_file_names.txt
